Certainly! Below is an example Python code using the `scikit-learn` library to implement k-means clustering to group customers based on their purchase history:

```python
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Sample purchase history data: each row represents a customer, and columns represent different products
purchase_history = np.array([[2, 3, 0, 1, 0],
                             [1, 2, 1, 0, 1],
                             [0, 1, 2, 3, 2],
                             [3, 0, 3, 2, 3],
                             [2, 1, 0, 2, 1]])

# Scale the data
scaler = StandardScaler()
scaled_purchase_history = scaler.fit_transform(purchase_history)

# Define the number of clusters
num_clusters = 3

# Initialize and fit the KMeans model
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
kmeans.fit(scaled_purchase_history)

# Get cluster labels
cluster_labels = kmeans.labels_

# Print cluster labels for each customer
for i, label in enumerate(cluster_labels):
    print(f"Customer {i+1} belongs to Cluster {label+1}")

# Print cluster centers
print("\nCluster Centers:")
print(scaler.inverse_transform(kmeans.cluster_centers_))
```

In this code, we first define sample purchase history data where each row represents a customer and each column represents the purchase count of a different product. Then, we scale the data using `StandardScaler` to ensure that each feature has a mean of 0 and a standard deviation of 1. Next, we define the number of clusters (`num_clusters`) and initialize the `KMeans` model with this parameter. We fit the model to the scaled purchase history data and obtain cluster labels for each customer. Finally, we print out the cluster labels for each customer and the cluster centers (which represent the centroids of each cluster) after inverse scaling.
